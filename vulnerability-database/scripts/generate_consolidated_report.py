#!/usr/bin/env python3
"""
Consolidated Security Report Generator
Generates enterprise-level security reports across multiple repositories
"""

import json
import os
import sys
import argparse
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Any
import glob

class ConsolidatedReportGenerator:
    """Generates consolidated security reports across repositories"""
    
    def __init__(self):
        self.repositories_data = []
        self.total_stats = {
            "total_repositories": 0,
            "total_issues": 0,
            "severity_counts": {"critical": 0, "high": 0, "medium": 0, "low": 0},
            "category_counts": {},
            "compliance_standards": set(),
            "max_risk_score": 0,
            "avg_risk_score": 0
        }
    
    def load_scan_results(self, results_dir: str):
        """Load all scan results from artifacts directory"""
        results_pattern = os.path.join(results_dir, "**/scan-results-*.json")
        result_files = glob.glob(results_pattern, recursive=True)
        
        if not result_files:
            print("No scan result files found")
            return
        
        for result_file in result_files:
            try:
                with open(result_file, 'r') as f:
                    data = json.load(f)
                    if isinstance(data, list) and len(data) > 0:
                        repo_data = data[0]  # Scanner returns list with one item
                        self.repositories_data.append(repo_data)
                        self._update_total_stats(repo_data)
            except Exception as e:
                print(f"Error loading {result_file}: {e}")
                continue
        
        self.total_stats["total_repositories"] = len(self.repositories_data)
        if self.total_stats["total_repositories"] > 0:
            self.total_stats["avg_risk_score"] = sum(
                repo.get("compliance_impact", {}).get("max_risk_score", 0) 
                for repo in self.repositories_data
            ) / self.total_stats["total_repositories"]
        
        # Convert set to list for JSON serialization
        self.total_stats["compliance_standards"] = list(self.total_stats["compliance_standards"])
    
    def _update_total_stats(self, repo_data: Dict[str, Any]):
        """Update total statistics with repository data"""
        self.total_stats["total_issues"] += repo_data.get("total_issues", 0)
        
        # Update severity counts
        severity_counts = repo_data.get("severity_counts", {})
        for severity, count in severity_counts.items():
            self.total_stats["severity_counts"][severity] += count
        
        # Update category counts
        for vuln in repo_data.get("vulnerabilities_found", []):
            category = vuln.get("category", "unknown")
            self.total_stats["category_counts"][category] = \
                self.total_stats["category_counts"].get(category, 0) + len(vuln.get("issues", []))
        
        # Update compliance standards
        compliance_impact = repo_data.get("compliance_impact", {})
        standards = compliance_impact.get("standards", [])
        self.total_stats["compliance_standards"].update(standards)
        
        # Update max risk score
        risk_score = compliance_impact.get("max_risk_score", 0)
        self.total_stats["max_risk_score"] = max(self.total_stats["max_risk_score"], risk_score)
    
    def generate_html_report(self) -> str:
        """Generate comprehensive HTML report"""
        html = f"""
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="UTF-8">
            <title>Enterprise Security Dashboard - Ecg-creator Portfolio</title>
            <style>
                * {{ box-sizing: border-box; }}
                body {{ 
                    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; 
                    margin: 0; 
                    padding: 20px; 
                    background-color: #f5f5f5; 
                }}
                .container {{ max-width: 1200px; margin: 0 auto; }}
                .header {{ 
                    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); 
                    color: white; 
                    padding: 30px; 
                    border-radius: 10px; 
                    margin-bottom: 30px; 
                    text-align: center;
                }}
                .header h1 {{ margin: 0; font-size: 2.5em; }}
                .header p {{ margin: 10px 0 0; opacity: 0.9; }}
                
                .dashboard {{ 
                    display: grid; 
                    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); 
                    gap: 20px; 
                    margin-bottom: 30px; 
                }}
                .metric-card {{ 
                    background: white; 
                    padding: 25px; 
                    border-radius: 10px; 
                    box-shadow: 0 4px 6px rgba(0,0,0,0.1); 
                    text-align: center;
                }}
                .metric-card h3 {{ margin: 0 0 10px; color: #333; font-size: 1.1em; }}
                .metric-value {{ font-size: 2.5em; font-weight: bold; margin: 10px 0; }}
                .critical-value {{ color: #d32f2f; }}
                .high-value {{ color: #f57c00; }}
                .medium-value {{ color: #fbc02d; }}
                .low-value {{ color: #388e3c; }}
                .total-value {{ color: #1976d2; }}
                
                .chart-container {{ 
                    background: white; 
                    padding: 25px; 
                    border-radius: 10px; 
                    box-shadow: 0 4px 6px rgba(0,0,0,0.1); 
                    margin-bottom: 30px;
                }}
                
                .repo-section {{ 
                    background: white; 
                    margin-bottom: 20px; 
                    border-radius: 10px; 
                    box-shadow: 0 4px 6px rgba(0,0,0,0.1); 
                    overflow: hidden;
                }}
                .repo-header {{ 
                    background: #f8f9fa; 
                    padding: 20px; 
                    border-bottom: 1px solid #e9ecef; 
                }}
                .repo-header h2 {{ margin: 0; color: #495057; }}
                .repo-stats {{ 
                    display: flex; 
                    gap: 20px; 
                    margin-top: 10px; 
                    flex-wrap: wrap;
                }}
                .repo-stat {{ 
                    padding: 8px 12px; 
                    background: #e3f2fd; 
                    border-radius: 15px; 
                    font-size: 0.9em;
                }}
                
                .vulnerability {{ 
                    padding: 20px; 
                    border-left: 4px solid #ccc; 
                    margin: 10px 20px;
                }}
                .vulnerability.critical {{ border-left-color: #d32f2f; background: #ffebee; }}
                .vulnerability.high {{ border-left-color: #f57c00; background: #fff3e0; }}
                .vulnerability.medium {{ border-left-color: #fbc02d; background: #fffde7; }}
                .vulnerability.low {{ border-left-color: #388e3c; background: #e8f5e8; }}
                
                .vulnerability h3 {{ margin: 0 0 10px; }}
                .vulnerability-meta {{ 
                    display: flex; 
                    gap: 15px; 
                    margin-bottom: 15px; 
                    flex-wrap: wrap;
                }}
                .meta-tag {{ 
                    padding: 4px 8px; 
                    background: rgba(0,0,0,0.1); 
                    border-radius: 12px; 
                    font-size: 0.8em;
                }}
                
                .issues {{ margin-top: 15px; }}
                .issue {{ 
                    background: rgba(0,0,0,0.05); 
                    padding: 10px; 
                    margin: 5px 0; 
                    border-radius: 5px; 
                    font-family: monospace; 
                    font-size: 0.9em;
                }}
                
                .compliance-section {{ 
                    background: white; 
                    padding: 25px; 
                    border-radius: 10px; 
                    box-shadow: 0 4px 6px rgba(0,0,0,0.1); 
                    margin-bottom: 30px;
                }}
                .compliance-standards {{ 
                    display: flex; 
                    gap: 10px; 
                    flex-wrap: wrap; 
                    margin-top: 15px;
                }}
                .standard-tag {{ 
                    padding: 8px 15px; 
                    background: #e8f5e8; 
                    color: #2e7d32; 
                    border-radius: 20px; 
                    font-weight: bold;
                }}
                
                .recommendations {{ 
                    background: #f8f9fa; 
                    border: 1px solid #dee2e6; 
                    border-radius: 10px; 
                    padding: 20px; 
                    margin-top: 30px;
                }}
                .recommendations h2 {{ color: #495057; margin-top: 0; }}
                .recommendation {{ 
                    padding: 15px; 
                    margin: 10px 0; 
                    background: white; 
                    border-left: 4px solid #007bff; 
                    border-radius: 0 5px 5px 0;
                }}
            </style>
        </head>
        <body>
            <div class="container">
                <div class="header">
                    <h1>Enterprise Security Dashboard</h1>
                    <p>Comprehensive Security Analysis - Ecg-creator Portfolio</p>
                    <p>Generated: {datetime.now().strftime("%Y-%m-%d %H:%M:%S UTC")}</p>
                    <p>Source: Session Foundation Security Audit Findings</p>
                </div>
                
                <div class="dashboard">
                    <div class="metric-card">
                        <h3>Repositories Scanned</h3>
                        <div class="metric-value total-value">{self.total_stats['total_repositories']}</div>
                    </div>
                    <div class="metric-card">
                        <h3>Total Issues</h3>
                        <div class="metric-value total-value">{self.total_stats['total_issues']}</div>
                    </div>
                    <div class="metric-card">
                        <h3>Critical Issues</h3>
                        <div class="metric-value critical-value">{self.total_stats['severity_counts']['critical']}</div>
                    </div>
                    <div class="metric-card">
                        <h3>High Issues</h3>
                        <div class="metric-value high-value">{self.total_stats['severity_counts']['high']}</div>
                    </div>
                    <div class="metric-card">
                        <h3>Medium Issues</h3>
                        <div class="metric-value medium-value">{self.total_stats['severity_counts']['medium']}</div>
                    </div>
                    <div class="metric-card">
                        <h3>Low Issues</h3>
                        <div class="metric-value low-value">{self.total_stats['severity_counts']['low']}</div>
                    </div>
                    <div class="metric-card">
                        <h3>Max Risk Score</h3>
                        <div class="metric-value critical-value">{self.total_stats['max_risk_score']:.1f}/10</div>
                    </div>
                    <div class="metric-card">
                        <h3>Avg Risk Score</h3>
                        <div class="metric-value high-value">{self.total_stats['avg_risk_score']:.1f}/10</div>
                    </div>
                </div>
                
                <div class="compliance-section">
                    <h2>Compliance Impact Analysis</h2>
                    <p>The following compliance standards are affected by identified vulnerabilities:</p>
                    <div class="compliance-standards">
        """
        
        for standard in self.total_stats['compliance_standards']:
            html += f'<div class="standard-tag">{standard}</div>'
        
        html += """
                    </div>
                    <p style="margin-top: 20px;"><strong>Business Impact:</strong> Security vulnerabilities can lead to compliance violations, 
                    resulting in financial penalties, audit failures, and loss of customer trust. Immediate remediation 
                    is recommended for critical and high-severity issues.</p>
                </div>
        """
        
        # Category breakdown chart
        if self.total_stats['category_counts']:
            html += """
                <div class="chart-container">
                    <h2>Vulnerability Categories</h2>
                    <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px;">
            """
            for category, count in self.total_stats['category_counts'].items():
                category_name = category.replace('_', ' ').title()
                html += f"""
                    <div style="text-align: center; padding: 15px; background: #f8f9fa; border-radius: 8px;">
                        <div style="font-size: 1.5em; font-weight: bold; color: #495057;">{count}</div>
                        <div style="color: #6c757d; margin-top: 5px;">{category_name}</div>
                    </div>
                """
            html += """
                    </div>
                </div>
            """
        
        # Repository details
        for repo in self.repositories_data:
            html += f"""
                <div class="repo-section">
                    <div class="repo-header">
                        <h2>{repo['repository']}</h2>
                        <div class="repo-stats">
                            <div class="repo-stat">Total Issues: {repo['total_issues']}</div>
                            <div class="repo-stat">Critical: {repo['severity_counts']['critical']}</div>
                            <div class="repo-stat">High: {repo['severity_counts']['high']}</div>
                            <div class="repo-stat">Medium: {repo['severity_counts']['medium']}</div>
                            <div class="repo-stat">Low: {repo['severity_counts']['low']}</div>
                            <div class="repo-stat">Risk Score: {repo['compliance_impact']['max_risk_score']}/10</div>
                        </div>
                    </div>
            """
            
            for vuln in repo['vulnerabilities_found']:
                html += f"""
                    <div class="vulnerability {vuln['severity']}">
                        <h3>{vuln['name']} ({vuln['vulnerability_id']})</h3>
                        <div class="vulnerability-meta">
                            <div class="meta-tag">Severity: {vuln['severity'].upper()}</div>
                            <div class="meta-tag">CVSS: {vuln['cvss_score']}</div>
                            <div class="meta-tag">Category: {vuln['category'].replace('_', ' ').title()}</div>
                            <div class="meta-tag">Issues: {len(vuln['issues'])}</div>
                            <div class="meta-tag">Fix Time: {vuln['estimated_fix_time']}</div>
                        </div>
                        <p><strong>Remediation:</strong> {vuln['remediation_summary']}</p>
                        <div class="issues">
                            <strong>Issues Found:</strong>
                """
                
                for issue in vuln['issues'][:5]:  # Limit to first 5 issues
                    html += f"""
                        <div class="issue">
                            📁 {issue['file']} (Line {issue['line']})<br>
                            🔍 Pattern: {issue['pattern']}<br>
                            💻 Match: {issue['match']}
                        </div>
                    """
                
                if len(vuln['issues']) > 5:
                    html += f'<div class="issue">... and {len(vuln["issues"]) - 5} more issues</div>'
                
                html += "</div></div>"
            
            html += "</div>"
        
        # Recommendations section
        html += f"""
            <div class="recommendations">
                <h2>Strategic Recommendations</h2>
                <div class="recommendation">
                    <h3>🚨 Immediate Actions Required</h3>
                    <p>Address {self.total_stats['severity_counts']['critical']} critical and {self.total_stats['severity_counts']['high']} high-severity vulnerabilities immediately to prevent security incidents and compliance violations.</p>
                </div>
                <div class="recommendation">
                    <h3>📊 Risk Management</h3>
                    <p>Maximum risk score of {self.total_stats['max_risk_score']}/10 indicates significant business risk. Implement comprehensive security controls and monitoring across all repositories.</p>
                </div>
                <div class="recommendation">
                    <h3>🏛️ Compliance Alignment</h3>
                    <p>Affected standards ({', '.join(self.total_stats['compliance_standards'])}) require immediate attention to maintain regulatory compliance and avoid penalties.</p>
                </div>
                <div class="recommendation">
                    <h3>💰 Profit Maximization</h3>
                    <p>Proactive vulnerability management reduces incident response costs, prevents data breaches, and maintains customer trust - directly impacting bottom-line profitability.</p>
                </div>
            </div>
            
            <div style="text-align: center; margin-top: 40px; padding: 20px; color: #6c757d; border-top: 1px solid #dee2e6;">
                <p>Generated by Ecg-creator Enterprise Security Framework</p>
                <p>Powered by Session Foundation Security Audit Findings</p>
                <p>© 2024 Ecg-creator - Enterprise Governance Solutions</p>
            </div>
            
        </div>
        </body>
        </html>
        """
        
        return html

def main():
    """Main CLI entry point"""
    parser = argparse.ArgumentParser(description="Generate consolidated security report")
    parser.add_argument("--results-dir", required=True,
                        help="Directory containing scan result files")
    parser.add_argument("--output", required=True,
                        help="Output HTML file path")
    
    args = parser.parse_args()
    
    # Generate consolidated report
    generator = ConsolidatedReportGenerator()
    generator.load_scan_results(args.results_dir)
    
    html_report = generator.generate_html_report()
    
    # Write report to file
    with open(args.output, 'w', encoding='utf-8') as f:
        f.write(html_report)
    
    print(f"Consolidated report generated: {args.output}")
    print(f"Repositories analyzed: {generator.total_stats['total_repositories']}")
    print(f"Total issues found: {generator.total_stats['total_issues']}")

if __name__ == "__main__":
    main()