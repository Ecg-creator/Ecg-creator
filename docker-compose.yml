# BelieversCommons Genesis Stack Docker Compose
# Revenue Optimization: â‚¹3.7Cr annual consolidation
version: '3.8'

services:
  # Genesis API - Core BelieversCommons services
  genesis-api:
    build:
      context: .
      target: production
    container_name: genesis_api
    ports:
      - "8080:8080"
    environment:
      - NODE_ENV=production
      - GENESIS_MODE=empire
      - REVENUE_TARGET=50000000
      - ECG_COMPLIANCE=enabled
    volumes:
      - genesis_data:/app/data
      - ./logs:/var/log/genesis
    depends_on:
      - ledger-db
      - redis-cache
    networks:
      - genesis-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # RiverOS - Transaction and revenue stream management
  riveros-api:
    build:
      context: .
      target: production
    container_name: riveros_transaction
    ports:
      - "8081:8081"
    environment:
      - NODE_ENV=production
      - GENESIS_MODE=river
      - REVENUE_SHARE_RATIO=85:15
      - REIT_DAO_ENABLED=true
    volumes:
      - riveros_data:/app/data
    depends_on:
      - ledger-db
      - multi-sig-safe
    networks:
      - genesis-network
    restart: unless-stopped

  # SynergizeOS - Cross-platform orchestration
  synergizeos-api:
    build:
      context: .
      target: production
    container_name: synergizeos_orchestration
    ports:
      - "8082:8082"
    environment:
      - NODE_ENV=production
      - GENESIS_MODE=synergize
      - COMPLIANCE_AUTOMATION=enabled
      - DPDPA_2023_COMPLIANCE=true
    volumes:
      - synergizeos_data:/app/data
    depends_on:
      - genesis-api
      - riveros-api
    networks:
      - genesis-network
    restart: unless-stopped

  # ECG Compliance Framework
  ecg-compliance:
    build:
      context: .
      target: production
    container_name: ecg_compliance
    ports:
      - "8083:8083"
    environment:
      - COMPLIANCE_MODE=ecg_charter
      - ARTICLE_2_1_SECURITY=enabled
      - ARTICLE_4_FINANCIAL=automated
      - ANNUAL_COMPLIANCE_FEE=3000000
    volumes:
      - compliance_data:/app/compliance
      - ./compliance-reports:/var/log/compliance
    depends_on:
      - ledger-db
    networks:
      - genesis-network
    restart: unless-stopped

  # MAHDI Ruby Sandbox
  mahdi-playground:
    build:
      context: .
      target: mahdi-sandbox
    container_name: mahdi_sandbox
    ports:
      - "3000:3000"
    environment:
      - RAILS_ENV=production
      - RUBY_MONETIZATION=premium
      - DEVELOPER_LICENSING_FEE=2500000
      - OPENTELEMETRY_ENABLED=true
    volumes:
      - mahdi_code:/app/mahdi/workspace
      - mahdi_logs:/var/log/mahdi
    depends_on:
      - ledger-db
      - prometheus-metrics
    networks:
      - genesis-network
    restart: unless-stopped

  # PostgreSQL Ledger Database
  ledger-db:
    image: postgres:15-alpine
    container_name: genesis_ledger
    environment:
      - POSTGRES_DB=genesis_ledger
      - POSTGRES_USER=genesis_admin
      - POSTGRES_PASSWORD_FILE=/run/secrets/db_password
    secrets:
      - db_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init-genesis-ledger.sql:/docker-entrypoint-initdb.d/01-init.sql
      - ./database/reit-dao-schema.sql:/docker-entrypoint-initdb.d/02-reit-dao.sql
      - ./database/membership-sbt.sql:/docker-entrypoint-initdb.d/03-membership.sql
    ports:
      - "5432:5432"
    networks:
      - genesis-network
    restart: unless-stopped

  # Redis Cache
  redis-cache:
    image: redis:7-alpine
    container_name: genesis_redis
    command: redis-server --requirepass ${REDIS_PASSWORD}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - genesis-network
    restart: unless-stopped

  # Multi-signature Safe Deployment
  multi-sig-safe:
    build:
      context: ./blockchain
      dockerfile: Dockerfile.safe
    container_name: multi_sig_safe
    environment:
      - SAFE_THRESHOLD=3
      - SAFE_OWNERS=5
      - GOVERNANCE_TOKEN=BELIEVERS
      - TREASURY_MANAGEMENT=enabled
    volumes:
      - safe_data:/app/safe
    networks:
      - genesis-network
    restart: unless-stopped

  # Cloudflare Security Integration
  cloudflare-security:
    build:
      context: ./security
      dockerfile: Dockerfile.cloudflare
    container_name: cloudflare_security
    environment:
      - CLOUDFLARE_API_TOKEN_FILE=/run/secrets/cloudflare_token
      - SECURITY_PREMIUM_FEE=4500000
      - VULNERABILITY_SCANNING=enabled
      - WAF_PROTECTION=enabled
    secrets:
      - cloudflare_token
    volumes:
      - security_logs:/var/log/security
    networks:
      - genesis-network
    restart: unless-stopped

  # Prometheus Metrics Collection
  prometheus-metrics:
    image: prom/prometheus:latest
    container_name: genesis_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=365d'
      - '--web.enable-lifecycle'
    networks:
      - genesis-network
    restart: unless-stopped

  # Grafana Dashboard
  grafana-dashboard:
    image: grafana/grafana:latest
    container_name: genesis_grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD_FILE=/run/secrets/grafana_password
    secrets:
      - grafana_password
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus-metrics
    networks:
      - genesis-network
    restart: unless-stopped

  # NGINX Reverse Proxy
  reverse-proxy:
    build:
      context: .
      target: reverse-proxy
    container_name: genesis_proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/genesis-stack.conf:/etc/nginx/conf.d/default.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - genesis-api
      - riveros-api
      - synergizeos-api
      - mahdi-playground
    networks:
      - genesis-network
    restart: unless-stopped

networks:
  genesis-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  genesis_data:
    driver: local
  riveros_data:
    driver: local
  synergizeos_data:
    driver: local
  compliance_data:
    driver: local
  mahdi_code:
    driver: local
  mahdi_logs:
    driver: local
  postgres_data:
    driver: local
  redis_data:
    driver: local
  safe_data:
    driver: local
  security_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

secrets:
  db_password:
    file: ./secrets/db_password.txt
  redis_password:
    file: ./secrets/redis_password.txt
  cloudflare_token:
    file: ./secrets/cloudflare_token.txt
  grafana_password:
    file: ./secrets/grafana_password.txt